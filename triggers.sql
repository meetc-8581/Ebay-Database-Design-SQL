-- TRIGGER 1: Deactivate User

CREATE OR REPLACE PROCEDURE REMOVE_LISTED_ITEMS(CURRENT_SELLER_ID IN SELLER.SELLER_ID%TYPE) AS
BEGIN
    DELETE FROM ITEMS WHERE SELLER_ID = CURRENT_SELLER_ID;
    dbms_output.put_line('Items deleted successfully');
END REMOVE_LISTED_ITEMS;



CREATE OR REPLACE PROCEDURE FIND_SELLER(USER_ID IN USERS.USER_ID%TYPE, CURRENT_SELLER_ID OUT SELLER.SELLER_ID%TYPE) AS
BEGIN
SELECT SELLER_ID INTO CURRENT_SELLER_ID FROM SELLER WHERE SELLER_ID = USER_ID;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  dbms_output.put_line('No seller found');
  CURRENT_SELLER_ID := NULL;
END FIND_SELLER;


CREATE OR REPLACE TRIGGER DEACTIVATE_SELLER
AFTER INSERT OR UPDATE 
ON USERS
FOR EACH ROW
DECLARE
CURRENT_SELLER_ID SELLER.SELLER_ID%TYPE;
BEGIN
    IF :new.IS_ACTIVE = 0 THEN
        FIND_SELLER(:new.USER_ID, CURRENT_SELLER_ID);
        IF CURRENT_SELLER_ID IS NOT NULL THEN
            REMOVE_LISTED_ITEMS(CURRENT_SELLER_ID);
        END IF;
    END IF;
END;
/




-- TRIGGER 2: Update Inventory


CREATE OR REPLACE PROCEDURE UPDATE_NON_AUCTION_ITEMS(CURRENT_ORDER_ID IN ORDERS.ORDER_ID%TYPE) AS
CURSOR NORMAL_ITEMS_CURSOR IS
SELECT ITEM_ID, PURCHASED_QUANTITY FROM NORMAL_ITEM_ORDER 
WHERE ORDER_ID = CURRENT_ORDER_ID FOR UPDATE;
CURRENT_ITEM_ID ITEMS.ITEM_ID%TYPE;
QTY NUMBER;
BEGIN
OPEN NORMAL_ITEMS_CURSOR;
LOOP
    FETCH NORMAL_ITEMS_CURSOR INTO CURRENT_ITEM_ID, QTY;
    UPDATE NORMAL_ITEM SET AVAILABLE_QUANTITY = AVAILABLE_QUANTITY - QTY WHERE ITEM_ID = CURRENT_ITEM_ID; 
    EXIT WHEN (NORMAL_ITEMS_CURSOR %NOTFOUND);
    END LOOP;
    CLOSE NORMAL_ITEMS_CURSOR;
UPDATE ITEMS SET IS_SOLD = 1 WHERE ITEM_ID IN (SELECT ITEM_ID FROM NORMAL_ITEM WHERE AVAILABLE_QUANTITY = 0);
EXCEPTION
WHEN NO_DATA_FOUND THEN
  dbms_output.put_line('Item not found');
END UPDATE_NON_AUCTION_ITEMS;

CREATE OR REPLACE PROCEDURE UPDATE_AUCTION_ITEMS(CURRENT_ORDER_ID IN ORDERS.ORDER_ID%TYPE) AS
BEGIN
UPDATE ITEMS SET IS_SOLD = 1 WHERE ITEM_ID IN (SELECT ITEM_ID FROM AUCTION_ORDER WHERE AUCTION_ORDER_ID = CURRENT_ORDER_ID);
EXCEPTION
WHEN NO_DATA_FOUND THEN
  dbms_output.put_line('Item not found');
END UPDATE_AUCTION_ITEMS;


CREATE OR REPLACE TRIGGER UPDATE_INVENTORY
AFTER INSERT
ON PAYMENT
FOR EACH ROW
DECLARE
BEGIN
    IF :new.ORDER_ID IS NOT NULL THEN
        UPDATE_NON_AUCTION_ITEMS(:NEW.ORDER_ID);
    ELSE
        UPDATE_AUCTION_ITEMS(:NEW.AUCTION_ORDER_ID);
    END IF;
    -- dbms_output.put_line('Order Id: ' || CURRENT_ORDER_ID);
END;
/


INSERT INTO PAYMENT VALUES ('TRANSACTION002',1234,1234123412,100,timestamp '2022-07-05 20:00:00','ORDERID001',NULL);

SELECT * FROM PAYMENT;
SELECT * FROM NORMAL_ITEM;
SELECT * FROM ITEMS;
SELECT * FROM NORMAL_ITEM_ORDER;
